{"version":3,"sources":["BubbleSort/BubbleSort.jsx","App.js","serviceWorker.js","index.js"],"names":["BubbleSort","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","array","isSorted","reset","document","getElementById","disabled","highTimeOut","setTimeout","i","clearTimeout","min","max","push","Math","floor","random","setState","resetColor","arr","getElementsByClassName","length","style","backgroundColor","_loop","_loop2","j","temp","height","concat","_this2","react_default","a","createElement","className","map","value","idx","key","onClick","id","bubble_sort","React","Component","App","BubbleSort_BubbleSort_BubbleSort","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72adfbd9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './BubbleSort.css';\r\nimport { render } from '@testing-library/react';\r\n \r\n//to do:\r\n//1) fix clear timeout. Reset button should stop everything including animation - DONE.\r\n//2) set the colors right -DONE\r\n//3) design the UI - kinda...?\r\n\r\n//problems:\r\n//1)if i change the size of the array the set timeout function gets even more delayed and \r\n//it messes up the color change\r\n\r\nexport default class BubbleSort extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            isSorted: false,\r\n        };\r\n    }\r\n\r\ncomponentDidMount(){\r\n    this.reset();\r\n}\r\n\r\nreset() {\r\n    //enable bubble sort button\r\n    document.getElementById(\"freezeBtn\").disabled = false;\r\n\r\n    //clear timeout\r\n    var highTimeOut = setTimeout(';');\r\n    for (var i = 0; i < highTimeOut; i++) {\r\n      clearTimeout(i);\r\n    }\r\n    //clear array\r\n    const array = [];\r\n    for (let i = 0; i < 20; i++) {\r\n      array.push(randomIntFromInterval(1, 500));\r\n    }\r\n    this.setState({array});\r\n\r\n    //clear color\r\n    this.resetColor(array);\r\n\r\n    return array;\r\n}\r\n\r\nresetColor(){\r\n    const arr = this.state.array;\r\n    const array = document.getElementsByClassName('array-bar');\r\n    for(let i = 0; i < arr.length; i++){\r\n        array[i].style.backgroundColor = 'rgb(182, 155, 224)';               \r\n    }\r\n}\r\n\r\nbubble_sort() {\r\n\r\n    //disable the buttin while bubble sort is running\r\n    document.getElementById(\"freezeBtn\").disabled = true;\r\n\r\n    const array = document.getElementsByClassName('array-bar');\r\n    const arr = this.state.array;\r\n       for (let i = 0; i < arr.length; i++) {\r\n\r\n          setTimeout(() => {\r\n\r\n                for (let j = 0; j < arr.length - 1 - i; j++) {\r\n                    \r\n                    //comparing two elements - change color\r\n                      setTimeout(() =>{\r\n                        array[j].style.backgroundColor = 'rgb(182, 155, 224)';\r\n                        array[j+1].style.backgroundColor = 'rgb(182, 155, 224)';\r\n                    },  (j+1) *120);\r\n\r\n                    // if swapping needed\r\n                     setTimeout(() =>{\r\n                        if (arr[j] > arr[j + 1]) {\r\n                            const temp = arr[j];\r\n                            arr[j] = arr[j + 1];\r\n                            arr[j + 1] = temp;\r\n\r\n                            //change height\r\n                            array[j].style.height = `${arr[j]}px`;\r\n                            array[j+1].style.height = `${temp}px`;\r\n                        }\r\n                         else{\r\n                             array[j].style.backgroundColor = 'rgb(148, 42, 148)';\r\n                             array[j+1].style.backgroundColor = 'rgb(148, 42, 148)';\r\n                         }\r\n                    },(j+1) *100);   \r\n\r\n                    setTimeout(() =>{\r\n                        array[j].style.backgroundColor = 'rgb(148, 42, 148)';\r\n                        array[j+1].style.backgroundColor = 'rgb(148, 42, 148)';\r\n                    },  (j+1)* 100);\r\n\r\n                }\r\n            }, i * arr.length * 100);\r\n        }\r\n}\r\n\r\n render() {\r\n\r\n    const {array} = this.state;\r\n    return (\r\n        <div className=\"*\">\r\n            <div className=\"title\">Bubble Sort Visualizer</div>\r\n        <div className = \"array-container\">\r\n\r\n        {array.map((value, idx) => (\r\n                <div\r\n                className=\"array-bar\"\r\n                key = {idx}\r\n                style={{height: `${value}px`}}>\r\n                </div>\r\n        ))}\r\n            <div>\r\n                <button className=\"button\" onClick={() => this.reset()}>Reset</button>\r\n                <button className=\"button\" id=\"freezeBtn\" onClick={() => this.bubble_sort()}>Sort Me</button>\r\n\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n}\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n","import React from 'react';\nimport './App.css';\nimport BubbleSort from './BubbleSort/BubbleSort';\n\nfunction App() {\n    return (<div className = \"App\"><BubbleSort></BubbleSort></div>);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode><App/></React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}